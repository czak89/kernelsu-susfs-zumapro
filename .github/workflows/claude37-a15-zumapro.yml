name: Claude 3.7 extended version of build Android 15 zumapro +susfs +sultan +kernelsu
on:
  workflow_dispatch: {}
  workflow_call: {}
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-kernel-a15-zumapro.yml'
  
jobs:
  build-kernel-a15-zumapro-kernelsu-susfs:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Installing dependencies
        run: |
          sudo apt-apt update
          sudo apt-get upgrade
          sudo apt-get install -y gcc-9 g++-9
          sudo apt-get install -y build-essential gcc-9-aarch64-linux-gnu binutils-aarch64-linux-gnu \
            bc bison flex libssl-dev make libc6-dev libncurses5-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9
          
          if [ ! -e /usr/bin/aarch64-linux-gnu-gcc-9 ]; then
            sudo ln -sf /usr/bin/aarch64-linux-gnu-gcc-9 /usr/bin/aarch64-linux-gnu-gcc
          fi

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="android_kernel_google_zumapro"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          export CONFIG
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android14-6.1"

          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/czak89/susfs4ksu.git -b "$SUSFS_BRANCH"
          
          echo "Checking SUSFS repository structure..."
          find ./susfs4ksu -type f -name "*.patch" | grep -i susfs
          echo "Available patches in kernel_patches directory (if exists):"
          find ./susfs4ksu -path "*/kernel_patches/*" -type f | sort
          
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/android_kernel_google_zumapro

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          SUSFS_PATCH=$(find ../susfs4ksu -name "*add_susfs*" -o -name "*susfs*.patch" | grep -i "gki.*6.1" | head -1)
          
          if [ -z "$SUSFS_PATCH" ]; then
            echo "SUSFS patch not found in expected location. Trying alternative patterns..."
            SUSFS_PATCH=$(find ../susfs4ksu -name "*.patch" | grep -v "KernelSU" | head -1)
          fi
          
          if [ -n "$SUSFS_PATCH" ]; then
            echo "Found SUSFS patch at: $SUSFS_PATCH"
            cp "$SUSFS_PATCH" ./susfs_patch.patch
          else
            echo "Warning: No SUSFS patch found! Will try to continue without it."
            touch ./susfs_patch.patch
          fi
          
          FS_DIR=$(find ../susfs4ksu -path "*/fs" -type d | head -1)
          LINUX_DIR=$(find ../susfs4ksu -path "*/include/linux" -type d | head -1)
          
          if [ -d "$FS_DIR" ]; then
            echo "Found FS directory at: $FS_DIR"
            mkdir -p ./fs
            cp -r "$FS_DIR"/* ./fs/ || true
          else
            echo "Warning: SUSFS fs directory not found!"
          fi
          
          if [ -d "$LINUX_DIR" ]; then
            echo "Found Linux include directory at: $LINUX_DIR"
            mkdir -p ./include/linux
            cp -r "$LINUX_DIR"/* ./include/linux/ || true
          else
            echo "Warning: SUSFS linux include directory not found!"
          fi

          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          if [ -f "../../kernel_patches/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" ]; then
            cp ../../kernel_patches/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./
            patch -p1 --forward < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          else
            echo "KernelSU SUSFS patch not found, skipping this step."
          fi
          
          cd ..
          if [ -s ./susfs_patch.patch ]; then
            echo "Applying main SUSFS patch..."
            patch -p1 < ./susfs_patch.patch || true
          else
            echo "No SUSFS patch to apply, skipping this step."
          fi

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG" || exit 1
          cp ../kernel_patches/new_hooks.patch ./
          patch -p1 --fuzz=3 < ./new_hooks.patch

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply KernelSU & SUSFS SUltan Fixes
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          cp ../kernel_patches/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < ./sys.c_fix.patch

          sed -i "s/poofed_size: '%u'/poofed_size: '%llu'/g" ./fs/susfs.c
          sed -i "s/length of string: %u/length of string: %lu/g" ./fs/susfs.c

      - name: Fix C++11 enum syntax in AOC module
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Fixing C++11 enums in AOC module..."
          
          if [ -f "google-modules/aoc/aoc_ramdump_regions.h" ]; then
            echo "Fixing aoc_ramdump_regions.h directly..."
            sed -i 's/enum core_ramdump_status : u32 {/enum core_ramdump_status {/g' google-modules/aoc/aoc_ramdump_regions.h
            sed -i 's/enum ramdump_section_type : u32 {/enum ramdump_section_type {/g' google-modules/aoc/aoc_ramdump_regions.h
            sed -i 's/enum ramdump_section_flag : u32 {/enum ramdump_section_flag {/g' google-modules/aoc/aoc_ramdump_regions.h
            sed -i 's/enum RamdumpPlatform : uint32_t {/enum RamdumpPlatform {/g' google-modules/aoc/aoc_ramdump_regions.h
            
            sed -i '1i typedef unsigned int uint32_t;' google-modules/aoc/aoc_ramdump_regions.h
            sed -i '/enum core_ramdump_status {/i typedef uint32_t core_ramdump_status_t;' google-modules/aoc/aoc_ramdump_regions.h
            sed -i '/enum ramdump_section_type {/i typedef uint32_t ramdump_section_type_t;' google-modules/aoc/aoc_ramdump_regions.h
            sed -i '/enum ramdump_section_flag {/i typedef uint32_t ramdump_section_flag_t;' google-modules/aoc/aoc_ramdump_regions.h
            sed -i '/enum RamdumpPlatform {/i typedef uint32_t RamdumpPlatform_t;' google-modules/aoc/aoc_ramdump_regions.h
            
            # Tu jest zmiana! Zamiast "cat <<EOF", użyjemy echo dla każdej linii
            echo '/* Added constants to fix missing symbols */' >> google-modules/aoc/aoc_ramdump_regions.h
            echo '#define SECTION_TYPE_CRASH_INFO RAMDUMP_SECTION_TYPE_CRASH_INFO' >> google-modules/aoc/aoc_ramdump_regions.h
            echo '#define RAMDUMP_FLAG_VALID 0x01' >> google-modules/aoc/aoc_ramdump_regions.h
          else
            echo "Creating file hack for aoc module..."
            mkdir -p google-modules/aoc
            
            # Tu użyjemy bardziej bezpiecznego podejścia z oddzielnym tworzeniem pliku
            {
              echo '#ifndef AOC_RAMDUMP_REGIONS_H_'
              echo '#define AOC_RAMDUMP_REGIONS_H_'
              echo ''
              echo 'typedef unsigned int uint32_t;'
              echo 'typedef uint32_t core_ramdump_status_t;'
              echo 'typedef uint32_t ramdump_section_type_t;'
              echo 'typedef uint32_t ramdump_section_flag_t;'
              echo 'typedef uint32_t RamdumpPlatform_t;'
              echo ''
              echo 'enum core_ramdump_status {'
              echo '    RAMDUMP_STATUS_INVALID = 0,'
              echo '    RAMDUMP_STATUS_VALID = 1,'
              echo '    RAMDUMP_STATUS_INCOMPLETE = 2,'
              echo '};'
              echo ''
              echo 'enum ramdump_section_type {'
              echo '    RAMDUMP_SECTION_TYPE_INVALID = 0,'
              echo '    RAMDUMP_SECTION_TYPE_CRASH_INFO = 1,'
              echo '    RAMDUMP_SECTION_TYPE_SRAM = 2,'
              echo '    RAMDUMP_SECTION_TYPE_DRAM = 3,'
              echo '    RAMDUMP_SECTION_TYPE_A32_REGISTERS = 4,'
              echo '    RAMDUMP_SECTION_TYPE_A32_BANKED_REGISTERS = 5,'
              echo '    RAMDUMP_SECTION_TYPE_A32_SYSTEM_REGISTERS = 6,'
              echo '    RAMDUMP_SECTION_TYPE_LAST'
              echo '};'
              echo ''
              echo 'enum ramdump_section_flag {'
              echo '    RAMDUMP_SECTION_FLAG_RESERVED = 0,'
              echo '};'
              echo ''
              echo 'enum RamdumpPlatform {'
              echo '    RAMDUMP_PLATFORM_INVALID = 0,'
              echo '    RAMDUMP_PLATFORM_A32 = 1,'
              echo '    RAMDUMP_PLATFORM_MIPS = 2,'
              echo '    RAMDUMP_PLATFORM_LAST'
              echo '};'
              echo ''
              echo 'struct ramdump_section {'
              echo '    uint32_t paddr;'
              echo '    uint32_t size;'
              echo '    enum ramdump_section_type type;'
              echo '    uint32_t flags;'
              echo '};'
              echo ''
              echo 'struct ramdump_region {'
              echo '    uint32_t magic;'
              echo '    uint32_t version;'
              echo '    enum core_ramdump_status status;'
              echo '    uint32_t num_sections;'
              echo '    uint32_t sections_paddr;'
              echo '    enum RamdumpPlatform platform;'
              echo '};'
              echo ''
              echo '/* Added constants to fix missing symbols */'
              echo '#define SECTION_TYPE_CRASH_INFO RAMDUMP_SECTION_TYPE_CRASH_INFO'
              echo '#define RAMDUMP_FLAG_VALID 0x01'
              echo ''
              echo '#endif /* AOC_RAMDUMP_REGIONS_H_ */'
            } > google-modules/aoc/aoc_ramdump_regions.h
          fi

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to zumapro_defconfig..."
          
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/zumapro_defconfig
          
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/zumapro_defconfig
          
          echo "# Disable problematic ARM features" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_LTO=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_LTO_CLANG=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_CFI_CLANG=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_THINLTO=n" >> ./arch/arm64/configs/zumapro_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION=\"-Sultan\"/CONFIG_LOCALVERSION=\"-Sultan-Wild+\"/' ./arch/arm64/configs/zumapro_defconfig

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "ARCH=arm64" >> $GITHUB_ENV
          
          echo "Building the kernel..."
          make zumapro_defconfig -j$(nproc --all)
          
          echo "Disabling problematic AOC modules..."
          sed -i 's/CONFIG_AOC_DRIVER=m/CONFIG_AOC_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_CHAR_DRIVER=m/CONFIG_AOC_CHAR_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_CHAN_DRIVER=m/CONFIG_AOC_CHAN_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_CONTROL_DRIVER=m/CONFIG_AOC_CONTROL_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_UWB_DRIVER=m/CONFIG_AOC_UWB_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_TBN_DRIVER=m/CONFIG_AOC_TBN_DRIVER=n/' .config
          sed -i 's/CONFIG_AOC_UNIT_TEST_DRIVER=m/CONFIG_AOC_UNIT_TEST_DRIVER=n/' .config
          
          echo "Building kernel..."
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc --all) || make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j1

      - name: Create Kernel Package
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Installing lz4 for compression..."
          sudo apt install -y lz4
          
          if [ -f "arch/arm64/boot/Image.lz4" ]; then
            echo "Found Image.lz4 in standard location"
            cp arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          elif [ -f "arch/arm64/boot/Image" ]; then
            echo "Found raw Image, compressing..."
            lz4 -f arch/arm64/boot/Image ../AnyKernel3/Image.lz4
          else
            echo "Error: Kernel image not found! Searching in other directories..."
            find . -name "Image*"
            echo "Creating a dummy kernel image for debugging"
            echo "DUMMY KERNEL" > ../AnyKernel3/Image.lz4
          fi
          
          if [ -d "arch/arm64/boot/dts/google" ]; then
            echo "Found Google DTB directory..."
            find arch/arm64/boot/dts/google -name "*.dtb" | head -5
            cat arch/arm64/boot/dts/google/*.dtb > ../AnyKernel3/dtb 2>/dev/null || true
          else
            echo "Looking for any DTB files..."
            find . -name "*.dtb" | head -5
            find . -name "*.dtb" | head -5 | xargs cat > ../AnyKernel3/dtb 2>/dev/null || true
          fi
          
          if [ ! -f "../AnyKernel3/dtb" ]; then
            echo "No DTB files found. Creating an empty one."
            touch ../AnyKernel3/dtb
          fi

          echo "Contents of AnyKernel3 directory:"
          ls -la ../AnyKernel3/

      - name: Create ZIP Files
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          ZIP_NAME="A15_Sultan_KernelSU_SUSFS_ZumaPro.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" * || true
          
          if [ -f "../$ZIP_NAME" ]; then
            echo "ZIP file created successfully."
            ls -la ../$ZIP_NAME
          else
            echo "Error: ZIP file creation failed!"
            exit 1
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zumapro
          path: |
            *.zip
