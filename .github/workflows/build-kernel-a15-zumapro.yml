name: Build A15 Zuma Pro Kernel

on:
  workflow_dispatch:
  workflow_call:  # This allows this workflow to be called from another workflow
  
jobs:
  build-kernel-a15-zumapro-kernelsu-susfs:
    runs-on: ubuntu-20.04  # Use older Ubuntu for better GCC compatibility

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'false'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Installing dependencies
        run: |
          sudo apt update
          # Install required packages
          sudo apt install -y build-essential gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu bc bison flex libssl-dev make libc6-dev libncurses5-dev

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="android_kernel_google_zumapro"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
    
          # Define the branch names using the matrix values
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android14-6.1"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/android_kernel_google_zumapro

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          cp ../../kernel_patches/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./
          patch -p1 --forward < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || true

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/new_hooks.patch ./
          patch -p1 --fuzz=3 < ./new_hooks.patch

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply KernelSU & SUSFS SUltan Fixes
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < ./sys.c_fix.patch

          sed -i "s/poofed_size: '%u'/poofed_size: '%llu'/g" ./fs/susfs.c
          sed -i "s/length of string: %u/length of string: %lu/g" ./fs/susfs.c

      - name: Fix problematic code - ARMv8.2 Registers
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          # Create a patch to replace problematic ARMv8.2 registers
          cat > armv8_fix.patch << 'EOF'
          --- a/arch/arm64/mm/tlb.c
          +++ b/arch/arm64/mm/tlb.c
          @@ -100,9 +100,9 @@
           static void local_flush_tlb_range(vma_range_t r, unsigned long stride,
           			     bool last_level)
           {
          -	unsigned long addr;
          +	unsigned long addr, end;
          
          -	addr = round_down(r.start, stride);
          +	end = round_up(r.end, stride);
          
          	dsb(ishst);
          	for (; addr < r.end; addr += stride) {
          @@ -213,12 +213,12 @@
           static inline void __flush_tlb_range_ipa(struct mm_struct *mm,
           		unsigned long start, unsigned long end, unsigned long stride)
           {
          -	dsb(ishst);
          -	for (; start < end; start += stride) {
          -		if (last_level)
          -			__tlbi(rvale1is, __TLBI_VADDR(start, ASID(mm)));
          -		else
          -			__tlbi(rvae1is, __TLBI_VADDR(start, ASID(mm)));
          +	dsb(ish);
          +	if (last_level) {
          +		__tlbi(vmalle1is);
          +	} else {
          +		__tlbi(vmalle1is);
          +	}
          +	dsb(ish);
          +	isb();
           	}
          -	dsb(ish);
          -	isb();
          }
          EOF
          
          # Apply the patch
          patch -p1 < armv8_fix.patch || true
          
          echo "Patched ARMv8.2 register issues"

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to zumapro_defconfig..."
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/zumapro_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/zumapro_defconfig
          
          # Disable problematic features
          echo "CONFIG_LTO=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_LTO_CLANG=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_CFI_CLANG=n" >> ./arch/arm64/configs/zumapro_defconfig
          echo "CONFIG_THINLTO=n" >> ./arch/arm64/configs/zumapro_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION=\"-Sultan\"/CONFIG_LOCALVERSION=\"-Sultan-Wild+\"/' ./arch/arm64/configs/zumapro_defconfig

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "ARCH=arm64" >> $GITHUB_ENV
          
          echo "Building the kernel..."
          make zumapro_defconfig -j$(nproc --all)
          
          # Build using GCC with verbose output
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- V=1 -j$(nproc --all) || make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- V=1 -j1

      - name: Create Kernel Package
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Installing lz4 for compression..."
          sudo apt install -y lz4
          
          # Look for Image or compressed kernel
          echo "Checking for kernel image..."
          if [ -f "arch/arm64/boot/Image" ]; then
            echo "Found raw Image, compressing..."
            lz4 -f arch/arm64/boot/Image ../AnyKernel3/Image.lz4
          elif [ -f "arch/arm64/boot/Image.lz4" ]; then
            echo "Found Image.lz4, copying..."
            cp arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          else
            echo "Error: Kernel image not found! Searching for possible locations:"
            find . -name "Image*" || true
            echo "Cannot proceed without kernel image."
            exit 1
          fi
          
          # Find DTB files
          echo "Looking for DTB files..."
          if [ -d "arch/arm64/boot/dts/google" ]; then
            echo "Found Google DTB directory, concatenating DTBs..."
            cat arch/arm64/boot/dts/google/*.dtb > ../AnyKernel3/dtb || true
          else
            echo "Looking for any DTB files..."
            DTB_FILES=$(find . -name "*.dtb" | head -10)
            if [ -n "$DTB_FILES" ]; then
              echo "Found DTB files:"
              echo "$DTB_FILES"
              echo "$DTB_FILES" | xargs cat > ../AnyKernel3/dtb || true
            else
              echo "Warning: No DTB files found. Package may not boot."
            fi
          fi

          # Check AnyKernel3 contents
          echo "Contents of AnyKernel3 directory:"
          ls -la ../AnyKernel3/

      - name: Create ZIP Files
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Check if Image.lz4 exists
          if [ ! -f "Image.lz4" ]; then
            echo "Error: Image.lz4 not found in AnyKernel3 directory!"
            exit 1
          fi
          
          # Create a minimal AnyKernel3 ZIP if no dtb is found
          if [ ! -f "dtb" ]; then
            echo "Warning: No DTB file found. Creating ZIP without DTB..."
            touch dtb
          fi
          
          # Zip the files in the AnyKernel3 directory
          ZIP_NAME="A15_Sultan_KernelSU_SUSFS_ZumaPro.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
          # Verify the ZIP was created
          if [ -f "../$ZIP_NAME" ]; then
            echo "ZIP file created successfully."
            ls -la ../$ZIP_NAME
          else
            echo "Error: ZIP file creation failed!"
            exit 1
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zumapro
          path: |
            *.zip
